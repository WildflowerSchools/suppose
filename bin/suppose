#/usr/bin/env python
import click
from logbook import RotatingFileHandler
from suppose.pose2d import extract as _extract, combine as _combine, bundle_multiview as __bundle_multiview
from suppose.pose3d import reconstruct3d as _reconstruct3d

log_handler = RotatingFileHandler('suppose.log')
log_handler.push_application()


@click.group()
def cli():
    pass

@cli.command()
@click.option("--videos", required=True, show_default=True, help="path to video file; will accept python glob syntax to process multiple files")
@click.option("--model", default="cmu", show_default=True, help="feature extractor; cmu or mobilenet_thin")
@click.option("--resolution", default="432x368", show_default=True, help="network input resolution")
@click.option("--write-output/--no-write-output", default=True, show_default=True, help="Write poses to file")
@click.option("--display-progress/--no-display-progress", default=True, show_default=True, help="Show progress bar")
@click.option("--file-datetime-format", default="video_%Y-%m-%d-%H-%M-%S.mp4", show_default=True, help="strptime formatter to extract datetime from filename")
def extract(videos, model, resolution, write_output, display_progress, file_datetime_format):
    """
    Extract human poses in videos.
    """
    _extract(videos, model, resolution, write_output, display_progress, file_datetime_format)


@cli.command()
@click.option("--files", required=True, help="files glob to process")
@click.option("--output-filename", required=True, help="output filename prefix")
def combine(files, output_filename):
    _combine(files, output_filename)


@cli.command()
@click.option('--camera-poses', '-cp', multiple=True, required=True, help="camera pose files to bundle")
@click.option('--output', required=True, help="output filename")
def bundle(camera_poses, output):
    cps = []
    for cp in camera_poses:
        name, file = cp.split(",")
        cps.append(dict(name=name, file=file))
    __bundle_multiview(cps, output)


@cli.command()
@click.option('--file', required=True, help="input filename")
@click.option('--camera-calibration', '-cc', multiple=True, required=True, help="camera calibration file")
@click.option('--output', default="poses3d", show_default=True, help="output name prefix")
@click.option('--debug-output', default=False, type=bool, show_default=True, help="enable verbose debug output")
def reconstruct3d(file, camera_calibration, output, debug_output):
    """
    Find 3d reconstructed poses from 2d poses from mulitple camera views.
    """
    _reconstruct3d(file, camera_calibration, output, debug_output)


if __name__ == '__main__':
    cli()
