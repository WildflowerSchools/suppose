#/usr/bin/env python
import click
from logbook import RotatingFileHandler, Logger

from common import TIMESTAMP_REGEX
from suppose.pose2d import extract as _extract, combine as _combine, bundle_multiview as __bundle_multiview
from suppose.pose3d import reconstruct3d as _reconstruct3d
from suppose import proto
import datetime
from tqdm import tqdm
from tf_pose.estimator import TfPoseEstimator
from tf_pose.networks import get_graph_path, model_wh
from suppose.pose_extractor import PoseExtractor


log_handler = RotatingFileHandler('suppose.log')
log_handler.push_application()

log = Logger('suppose')


@click.group()
def cli():
    pass

@cli.command()
@click.option("--videos", required=True, show_default=True, help="path to video file; will accept python glob syntax to process multiple files")
@click.option("--model", default="cmu", show_default=True, help="feature extractor; cmu or mobilenet_thin")
@click.option("--resolution", default="432x368", show_default=True, help="network input resolution")
@click.option("--write-output/--no-write-output", default=True, show_default=True, help="Write poses to file")
@click.option("--display-progress/--no-display-progress", default=True, show_default=True, help="Show progress bar")
@click.option("--file-datetime-format", default="video_%Y-%m-%d-%H-%M-%S.mp4", show_default=True, help="strptime formatter to extract datetime from filename")
@click.option("--overwrite-output/--no-overwrite-output", default=False, show_default=True, help="Overwrite output file; skips file otherwise")
def extract(videos, model, resolution, write_output, display_progress, file_datetime_format, overwrite_output):
    """
    Extract human poses in videos.
    """
    _extract(videos, model, resolution, write_output, display_progress, file_datetime_format, overwrite_output)


@cli.command()
@click.option("--files", required=True, help="files glob to process")
@click.option("--output-filename", required=True, help="output filename prefix")
def combine(files, output_filename):
    _combine(files, output_filename)


@cli.command()
@click.option('--camera-poses', '-cp', multiple=True, required=True, help="camera pose files to bundle")
@click.option('--output', required=True, help="output filename")
def bundle(camera_poses, output):
    cps = []
    for cp in camera_poses:
        name, file = cp.split(",")
        cps.append(dict(name=name, file=file))
    __bundle_multiview(cps, output)


@cli.command()
@click.option('--file', required=True, help="input filename")
@click.option('--camera-calibration', '-cc', multiple=True, required=True, help="camera calibration file")
@click.option('--output', default="poses3d", show_default=True, help="output name prefix")
@click.option('--debug-output', default=False, type=bool, show_default=True, help="enable verbose debug output")
def reconstruct3d(file, camera_calibration, output, debug_output):
    """
    Find 3d reconstructed poses from 2d poses from mulitple camera views.
    """
    _reconstruct3d(file, camera_calibration, output, debug_output)


@cli.command()
@click.option("--input-files", required=True, help="Input files glob. Parent path of file must contain camera name.")
@click.option('--cameras', '-c', multiple=True, required=True, help="camera calibration name->file mapping")
@click.option('--output-file-pattern', required=False, default="ProcessedVideo3D_{}.pb", help="Output file pattern with {} as placeholder for data")
@click.option("--draw-viz", default=False, show_default=True, help="Draw and output 2d reprojection; requires videos to be present")
def batch_reconstruct3d(input_files, cameras, output_file_pattern, draw_viz):
    log.info("3D Reconstruction from multiple input files from multiple cameras")
    log.info("input files: {}".format(input_files))
    log.info("cameras: {}".format(cameras))
    log.info("draw_viz: {}".format(draw_viz))
    camera_list = []
    for c in cameras:
        name, camera_file = c.split(',')
        camera = proto.ImmutableCamera.from_legacy_json_file(camera_file, name=name)
        camera_list.append(camera)

    batch = proto.Batch.from_search(camera_list, input_files)
    pv3ds = batch.process(None, read_from_cache=False, write_to_cache=False)
    DATETIME_FORMAT="%Y-%m-%d-%H-%M-%S"
    total = list(batch.listings.values())[0].size
    pbar = tqdm(total=total)
    for pv3d in pv3ds:
        ts = pv3d.start_time
        date_text = datetime.datetime.fromtimestamp(ts).strftime(DATETIME_FORMAT)
        output_filename = output_file_pattern.format(date_text)
        pv3d.to_proto_file(output_filename)
        pbar.update(1)
        pbar.set_description(output_filename)
    pbar.close()


@cli.command()
@click.option("--input-files", required=True, help="Input files glob. Parent path of file must contain camera name.")
@click.option("--draw-viz", default=False, show_default=True, help="Draw and output 2d reprojection; requires videos to be present")
@click.option("--resolution", default="432x368", show_default=True, help="network input resolution")
@click.option("--model", default="cmu", show_default=True, help="feature extractor; cmu or mobilenet_thin")
@click.option("--timestamp-regex", default=TIMESTAMP_REGEX, show_default=True, help="Regular expression to extract date and time from full path of file.")
@click.option("--display-progress/--no-display-progress", default=True, show_default=True, help="Show progress bar")
def batch_extract(input_files, draw_viz, resolution, model, timestamp_regex, display_progress):
    log.info("Extract 2D poses from multiple files")
    log.info("input files: {}".format(input_files))
    log.info("draw_viz: {}".format(draw_viz))
    log.info("resolution: {}".format(resolution))
    log.info("model: {}".format(model))
    log.info("timestamp_regex: {}".format(timestamp_regex))
    log.info("display_progress: {}".format(display_progress))

    extractor = PoseExtractor()
    app = proto.App()
    app.process_2d(extractor, glob_pattern=input_files, timestamp_regex=timestamp_regex, display_progress=display_progress, draw_viz=draw_viz)

@cli.command()
@click.option("--input-files", required=True, help="Input files glob. Parent path of file must contain camera name.")
@click.option('--cameras', '-c', multiple=True, required=True, help="camera calibration name->file mapping")
@click.option('--output-file-pattern', required=False, default="ProcessedVideo3D_{}.pb", help="Output file pattern with {} as placeholder for data")
@click.option("--draw-viz", default=False, show_default=True, help="Draw and output 2d reprojection; requires videos to be present")
def batch_3d(input_files, cameras, output_file_pattern, draw_viz):
    log.info("3D Reconstruction from multiple input files from multiple cameras")
    log.info("input files: {}".format(input_files))
    log.info("cameras: {}".format(cameras))
    log.info("draw_viz: {}".format(draw_viz))
    camera_map = {}
    for c in cameras:
        name, camera_file = c.split(',')
        camera = proto.ImmutableCamera.from_legacy_json_file(camera_file, name=name)
        camera_map[name] = camera

    app = proto.App()
    app.process_3d(camera_map, glob_pattern=input_files)


if __name__ == '__main__':
    cli()
