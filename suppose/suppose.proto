syntax = "proto3";

package suppose;

message Vector2f {
    float x = 1;
    float y = 2;
}

message Vector3f {
    float x = 1;
    float y = 2;
    float z = 3;
}

message Pose2D {
    message Keypoint2D {
        Vector2f point = 1;
        float score = 2;
    }
    repeated Keypoint2D keypoints = 1;
    //map<string, Keypoint2D> keypoints = 1;
}

message ReprojectedPose2D {
    message ReprojectedKeypoint2D {
        Vector2f point = 1;
        float error = 2;
    }
    repeated ReprojectedKeypoint2D keypoints = 1;
    //map<string, ReprojectedKeypoint2D> keypoints = 1;
}

message Pose3D {
    enum Type {
        RECONSTRUCTED = 0;
        TRACKED = 1;
    }
    message Keypoint3D {
        Vector3f point = 1;
        Vector3f std = 2;
    }
    Type type = 1;
    float error = 2;
    repeated Keypoint3D keypoints = 3;
}

message Frame {
    double timestamp = 1;
    repeated Pose2D poses = 2;
}

message Frame3D {
    double timestamp = 1;
    repeated Pose3D poses = 2;
}

message ProcessedVideo {
    string camera = 1;
    int32 width = 2;
    int32 height = 3;
    string file = 4;
    string model = 5;
    repeated Frame frames = 6;
}

message Room {
    string name = 1;
    repeated ProcessedVideo processed_videos = 2;
}

message ProcessedVideo3D {
    string room = 1;
    repeated string cameras = 2;
    repeated Frame3D frames = 3;
}

message Image {
    string type = 1;
    bytes data = 2;
}

message File {
    string path = 1;
}

service PoseExtractor {
    rpc GetPose(Image) returns (Frame) {}
    rpc StreamPoses(stream Image) returns (stream Frame) {}
    rpc StreamPosesFromVideo(File) returns (stream Frame) {}
}